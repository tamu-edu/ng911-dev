test_config:
  conformance:
    tests:
      - name: "LOG_004"
        variations:
          - name: "LogEvents_request_incorrect_logEventId"
            description: "Validate 4xx error response for HTTP GET request with incorrect logEventId"
            interfaces:
              - name: "IF_ESRP_LOG"
                port_names: []
            params:
              messages:
                - action: "send"
                  if_name: "IF_ESRP_LOG"
                  if_port_name: ""  # Optional
                  prep_steps: []
                  type: "HTTP"
                  method: "GET"
                  response_code: "4xx"
                  http_url: "/LogEvents/test123"  # part after f.e. http://IP:PORT
                  body: ""
                  sipp_scenario: {}
                  run_in_background: "False"
          - name: "LogEvents_request"
            description: "Validate JSON body from HTTP 200 OK response for HTTP GET request to /LogEvents entrypoint"
            interfaces:
              - name: "IF_ESRP_LOG"
                port_names: []
            params:
              messages:
                - action: "send"
                  if_name: "IF_ESRP_LOG"
                  if_port_name: ""  # Optional
                  prep_steps: []
                  type: "HTTP"
                  method: "GET"
                  response_code: "200"
                  http_url: "/LogEvents"  # part after f.e. http://IP:PORT
                  body: ""
                  sipp_scenario: {}
                  run_in_background: "False"
          - name: "LogEvents_request_with_logEventId"
            description: "Validate JWS body from HTTP 200 OK response for HTTP GET request with correct logEventId"
            interfaces:
              - name: "IF_ESRP_LOG"
                port_names: []
            params:
              messages:
                - action: "send"
                  if_name: "IF_ESRP_LOG"
                  if_port_name: ""  # Optional
                  prep_steps:
                    - method_name: "extract_from_config"
                      kwargs:
                        config_part: "lab_config['lab_config']['entities']"
                        where_field: "name"
                        where_value: "LOG"
                        extract_field: "interfaces"
                      "save_result_as": "var.log_interfaces"
                    - method_name: "extract_from_config"
                      kwargs:
                         config_part: "var.log_interfaces"
                         where_field: "name"
                         where_value: "IF_LOG_ESRP"
                         extract_field: 'fqdn'
                      save_result_as: "var.log_fqdn"
                    - method_name: "extract_from_config"
                      kwargs:
                         config_part: "var.log_interfaces"
                         where_field: "name"
                         where_value: "IF_LOG_ESRP"
                         extract_field: 'port_mapping'
                      save_result_as: "var.log_port_mapping"
                    - method_name: "extract_from_config"
                      kwargs:
                         config_part: "var.log_port_mapping"
                         where_field: "protocol"
                         where_value: "HTTP"
                         extract_field: 'port'
                      save_result_as: "var.log_http_port"
                    - method_name: "extract_from_config"
                      kwargs:
                         config_part: "lab_config['lab_config']['entities']"
                         where_field: "name"
                         where_value: "LOG"
                         extract_field: 'certificate_file'
                      save_result_as: "var.log_cert"
                    - method_name: "generate_str"
                      kwargs:
                        string_to_modify: "http://{0}:{1}/LogEvents"
                        variables: "list.[var.log_fqdn, var.log_http_port]"
                      save_result_as: "var.http_url"
                    - method_name: "send_http_request"
                      kwargs:
                        url: "var.http_url"
                        method: "GET"
                        content_type: "text/plain"
                        body: ""
                      save_result_as: "var.logevents_json"
                    - method_name: "extract_from_config"
                      kwargs:
                             config_part: "lab_config['lab_config']['entities']"
                             where_field: "name"
                             where_value: "ESRP"
                             extract_field: 'certificate_key'
                      save_result_as: "var.esrp_key"
                    - method_name: "get_logevent_id_list_from_json"
                      kwargs:
                        json_source: "var.logevents_json"
                        jws_param_name: "logEventType"
                        jws_param_value: "CallSignallingMessageLogEvent"
                        key_path: "var.esrp_key"
                      save_result_as: "var.logeventid_list_callsignallingmessagelogevent"
                    - method_name: "generate_str"
                      kwargs:
                        string_to_modify: "/LogEvents/{0}"
                        variables: "list.[var.logeventid_list_callsignallingmessagelogevent[0]]"
                      save_result_as: "var.http_url_logeventid"
                  type: "HTTP"
                  method: "GET"
                  response_code: "200"
                  http_url: "var.http_url_logeventid"  # part after f.e. http://IP:PORT
                  body: ""
                  sipp_scenario: {}
                  run_in_background: "False"
        requirements:
          - name: "RQ_LOG_030"
            variations: ["LogEvents_request_incorrect_logEventId"]
          - name: "RQ_LOG_032"
            variations: ["LogEvents_request_with_logEventId"]
          - name: "RQ_LOG_034"
            variations: ["all"]
