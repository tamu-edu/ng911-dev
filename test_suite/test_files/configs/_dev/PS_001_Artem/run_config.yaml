run_config:
  global:
    response_timeout: 30
    type: "conformance"
    report_files:
    - type: "pdf"
      path: "CTR.pdf"
    - type: "docx"
      path: "CTR.docx"
    - type: "xml"
      path: "CTR.xml"
    - type: "csv"
      path: "CTR.csv"
    - type: "json"
      path: "CTR.json"
    log:
      level: "DEBUG"
      output_file: "test_files/logs/logger.log"
  tests:
  - name: "PS_001"
    requirements:
    - name: "RQ_PS_004"
      variations: [
        "all",
      ]
    - name: "RQ_PS_005"
      variations: [
        "all",
      ]
    - name: "RQ_PS_006"
      variations: [
        "all",
      ]
    - name: "RQ_PS_007"
      variations: [
        "all",
      ]
    - name: "RQ_PS_028"
      variations: [
        "all",
      ]
    variations:
    - name: "Policy_not_signed"
      mode: 'online'
      pcap_file: '# OPTIONAL'
      params:
        messages:
        - action: "send"
          prep_steps: []
          type: "HTTP"
          method: "POST"
          response_code: "4xx"
          http_url: "/Policies"
          body: "file.test_files/HTTP_messages/HTTP_JWS/Policy_not_signed.txt"
          sipp_scenario: {}
          run_in_background: "False"
      filtering_options:
      - message_type: 'stimulus'
        src_interface: 'IF_TS_PS'
        dst_interface: 'IF_PS_TS'
        sip_method: ''
        http_request_method: 'POST'
        response_status_code: '4xx'
        header_contains: ''
        body_contains: "file.test_files/HTTP_messages/HTTP_JWS/Policy_not_signed.txt"
    - name: "Policy_not_signed_by_policy_owner"
      mode: 'online'
      pcap_file: '# OPTIONAL'
      params:
        messages:
          - action: "send"
            prep_steps: [
              {
                method_name: "generate_random_certificate",
                kwargs: {
                          output_certificate_file: "file./tmp/temp.crt",
                          output_key_file: "file./tmp/temp.key"
                }
              },
              {
                method_name: "generate_jws",
                kwargs: {
                          json_source: "file.test_files/JSON/Policy_object_policyOwner_ng911.example.com_v010.3f.3.0.1.json",
                          cert_path: "file./tmp/temp.crt",
                          key_path: "file./tmp/temp.key",
                          output_file: "file./tmp/policy_not_signed_by_policy_owner.txt"
                },
                save_result_as: "var.jws_body"
              }
            ]
            type: "HTTP"
            method: "POST"
            response_code: "4xx"
            http_url: "/Policies"
            body: "var.jws_body"
            sipp_scenario: {}
            run_in_background: "False"
      filtering_options:
      - message_type: 'stimulus'
        src_interface: 'IF_TS_PS'
        dst_interface: 'IF_PS_TS'
        sip_method: ''
        http_request_method: 'POST'
        response_status_code: '4xx'
        header_contains: ''
        body_contains: "file./tmp/policy_not_signed_by_policy_owner.txt"
    - name: "Incorrect_JWS"
      mode: 'online'
      pcap_file: '# OPTIONAL'
      params:
        messages:
        - action: "send"
          prep_steps: []
          type: "HTTP"
          method: "POST"
          response_code: "4xx"
          http_url: "/Policies"
          body: "file.test_files/HTTP_messages/HTTP_JWS/Incorrect_JWS.txt"
          sipp_scenario: {}
          run_in_background: "False"
      filtering_options:
      - message_type: 'stimulus'
        src_interface: 'IF_TS_PS'
        dst_interface: 'IF_PS_TS'
        sip_method: ''
        http_request_method: 'POST'
        response_status_code: '4xx'
        header_contains: ''
        body_contains: "file.test_files/HTTP_messages/HTTP_JWS/Incorrect_JWS.txt"