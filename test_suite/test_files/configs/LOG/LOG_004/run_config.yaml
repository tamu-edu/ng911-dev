"run_config":
  "global":
    "type": "conformance"
    "id_summary":
      "lab":
        "name": ""
        "addr_line_1": ""
        "addr_line_2": ""
        "city": ""
        "state": ""
        "country": ""
        "zip": ""
        "url": ""
        "eng_name": ""
        "accred_status": ""
        "accred_ref": ""
        "accred_auth": ""
      "supplier":
        "name": ""
        "addr_line_1": ""
        "addr_line_2": ""
        "city": ""
        "state": ""
        "country": ""
        "zip": ""
        "url": ""
      "iut":
        "type": ""
        "name": ""
        "version": ""
        "test_period": ""
        "date_of_receipt": ""
        "location": ""
        "cs_id": ""
        "test_env": ""
      "test_env":
        "ixit_id": ""
        "spec_name": ""
        "spec_version": ""
        "ts_version": ""
        "test_period_start": ""
        "test_period_end": ""
        "log_ref": ""
        "log_ret_date": ""
    "comments":
    - "author": ""
      "comment": ""
    "report_files":
      "output_folder_path": ""
      "filename": "test_report"
      "detailed_view": false
      "types":
      - "pdf"
      - "docx"
    "log":
      "level": "DEBUG"
      "output_file": "test_files/logs/logger.log"
    "response_timeout": 30
  "tests":
  - "name": "LOG_004"
    "requirements":
    - "name": "RQ_LOG_030"
      "variations":
      - "LogEvents_request_incorrect_logEventId"
    - "name": "RQ_LOG_032"
      "variations":
      - "LogEvents_request_with_logEventId"
    - "name": "RQ_LOG_034"
      "variations":
      - "all"
    "variations":
    - "name": "LogEvents_request_incorrect_logEventId"
      "mode": "# pcap/online to be manually filled"
      "pcap_file": "# OPTIONAL"
      "params":
        "messages":
        - "action": "send"
          "prep_steps": []
          "type": "HTTP"
          "method": "GET"
          "response_code": "4xx"
          "http_url": "/LogEvents/test123"
          "body": ""
          "sipp_scenario": {}
          "run_in_background": "False"
      "filtering_options":
      - "message_type": "stimulus"
        "src_interface": "IF_TS_LOG"
        "dst_interface": "IF_LOG_TS"
        "http_request_method": "GET"
        "response_status_code": "4xx"
        "header_contains": ""
        "body_contains": ""
    - "name": "LogEvents_request"
      "mode": "# pcap/online to be manually filled"
      "pcap_file": "# OPTIONAL"
      "params":
        "messages":
        - "action": "send"
          "prep_steps": []
          "type": "HTTP"
          "method": "GET"
          "response_code": "200"
          "http_url": "/LogEvents"
          "body": ""
          "sipp_scenario": {}
          "run_in_background": "False"
      "filtering_options":
      - "message_type": "stimulus"
        "src_interface": "IF_TS_LOG"
        "dst_interface": "IF_LOG_TS"
        "http_request_method": "GET"
        "response_status_code": "200"
        "header_contains": ""
        "body_contains": ""
    - "name": "LogEvents_request_with_logEventId"
      "mode": "# pcap/online to be manually filled"
      "pcap_file": "# OPTIONAL"
      "params":
        "messages":
        - "action": "send"
          "prep_steps":
          - "method_name": "extract_from_config"
            "kwargs":
              "config_part": "lab_config['lab_config']['entities']"
              "where_field": "name"
              "where_value": "LOG"
              "extract_field": "interfaces"
            "save_result_as": "var.log_interfaces"
          - "method_name": "extract_from_config"
            "kwargs":
              "config_part": "var.log_interfaces"
              "where_field": "name"
              "where_value": "IF_LOG_TS"
              "extract_field": "fqdn"
            "save_result_as": "var.log_fqdn"
          - "method_name": "extract_from_config"
            "kwargs":
              "config_part": "var.log_interfaces"
              "where_field": "name"
              "where_value": "IF_LOG_TS"
              "extract_field": "port_mapping"
            "save_result_as": "var.log_port_mapping"
          - "method_name": "extract_from_config"
            "kwargs":
              "config_part": "var.log_port_mapping"
              "where_field": "protocol"
              "where_value": "HTTP"
              "extract_field": "port"
            "save_result_as": "var.log_http_port"
          - "method_name": "extract_from_config"
            "kwargs":
              "config_part": "lab_config['lab_config']['entities']"
              "where_field": "name"
              "where_value": "LOG"
              "extract_field": "certificate_file"
            "save_result_as": "var.log_cert"
          - "method_name": "generate_str"
            "kwargs":
              "string_to_modify": "http://{0}:{1}/LogEvents"
              "variables": "list.[var.log_fqdn, var.log_http_port]"
            "save_result_as": "var.http_url"
          - "method_name": "send_http_request"
            "kwargs":
              "url": "var.http_url"
              "method": "GET"
              "content_type": "application/json"
              "body": ""
            "save_result_as": "file./tmp/LOG_004/logevents.json"
          - "method_name": "extract_from_config"
            "kwargs":
              "config_part": "lab_config['lab_config']['entities']"
              "where_field": "name"
              "where_value": "TS"
              "extract_field": "certificate_key"
            "save_result_as": "var.ts_cert_key"
          - "method_name": "get_logevent_id_list_from_json"
            "kwargs":
              "json_source": "file./tmp/LOG_004/logevents.json"
              "jws_param_name": "logEventType"
              "jws_param_value": "CallSignallingMessageLogEvent"
              "key_path": "var.ts_cert_key"
            "save_result_as": "var.logeventid_list_callsignallingmessagelogevent"
          - "method_name": "generate_str"
            "kwargs":
              "string_to_modify": "https://{0}:{1}/LogEvents/{2}"
              "variables": "list.[ var.log_fqdn, var.log_http_port, var.logeventid_list_callsignallingmessagelogevent[0]\
                \ ]"
            "save_result_as": "var.http_url"
          "type": "HTTP"
          "method": "GET"
          "response_code": "200"
          "http_url": "var.http_url"
          "body": ""
          "sipp_scenario": {}
          "run_in_background": "False"
      "filtering_options":
      - "message_type": "stimulus"
        "src_interface": "IF_TS_LOG"
        "dst_interface": "IF_LOG_TS"
        "http_request_method": "GET"
        "response_status_code": "200"
        "header_contains": ""
        "body_contains": ""
