%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
name: TPlan
file_extensions:
  - tplan
scope: source.example-c
contexts:
  main:
    # Strings begin and end with quotes
    - match: '"'
      scope: punctuation.definition.string.begin.example-c
      push: double_quoted_string
    - match: "'"
      scope: punctuation.definition.string.begin.example-c
      push: single_quoted_string


    # Comments begin with a '--' and finish at the end of the line
    - match: '--'
      scope: punctuation.definition.comment.example-c
      push: line_comment

    # Keywords
    - match: \b(author|Author|date|Date|title|Title|TSS|tss|version|Version)\b
      scope: keyword.control.c
    - match: \b(xref|condition|Condition|context|Context|def|Def|entity|Entity|event|Event|header|Header|value|Value|unit|Unit|word|Word)\b
      scope: keyword.control.c
    - match: \b(end|End|group|Group|objective|Objective)\b
      scope: keyword.control.c
    - match: \b(config|Config|id|Id|ref|Ref|role|Role|RQ|rq|summary|Summary|TC|tc|TD|td|TP|tp)\b
      scope: keyword.control.c
    - match: \b(ensure|Ensure|that|That|with|With|when|When|then|Then|IUT|iut|TESTER|tester)\b
      scope: keyword.control.c
    - match: \b(a|A|an|An|as|As|in|In|is|Is|no|No|of|Of|the|The)\b
      scope: keyword.control.c
    - match: \b(and|And|not|Not|or|Or)\b
      scope: keyword.control.c
    - match: \b(receives|Receives|sends|Sends|containing|Containing|indicating|Indicating)\b
      scope: keyword.control.c
    - match: \b(receive|Receive|send|Send|contain|Contain|indicate|Indicate)\b
      scope: keyword.control.c
    - match: \b(receives|Receives|sends|Sends|contains|Contains|indicates|Indicates)\b
      scope: keyword.control.c
    - match: \b(from|From|to|To)\b
      scope: keyword.control.c
    - match: \b(after|After|before|Before|unordered|Unordered|within|Within)\b
      scope: keyword.control.c

    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.example-c

  double_quoted_string:
    - meta_scope: string.quoted.double.example-c
    - match: '\\.'
      scope: constant.character.escape.example-c
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

  single_quoted_string:
    - meta_scope: string.quoted.double.example-c
    - match: '\\.'
      scope: constant.character.escape.example-c
    - match: "'"
      scope: punctuation.definition.string.end.example-c
      pop: true

  line_comment:
    - meta_scope: comment.line.example-c
    - match: $
      pop: true
